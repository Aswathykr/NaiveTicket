2.2 
0

2.3
Machine prints a ticket without validation. No refund. Prints the ticket even if not enough money

2.5
Different object prints different ticket price that is created with.

2.6
public class Student{
}
public class LabClass {
}

2.7
Class public TicketMachine does not compile
error - Expected identifier
It doest not expect public after class

2.8
Yes it compiles and is not affected in any behavior

2.9
 fields
Price, balance, total

constructors
TicketMachine

methods
getPrice,getBalance,insertMoney,printTicket

2.10
There is no return type

2.11
Count is int
Representative is Student and host is Server

2.12
Alive,tutor,game

2.13
Order cannot be changed
Error- expecting ; , identifier expected, and illegal start of declaration

2.14
Yes it is, but I was able to write private int I,j;

2.15
private int status;

2.16
Student

2.17
2 and String and double

2.18
First two String and third be a enum.
Name, Author, category

2.19
public Pet(String petsName)
    {
        this.name = petsName;
    }

2.20
It compiles but not set the price of the object

2.21 one return price and another balance.
2.22 Get the balance amount 
2.23 No
2.24

public int getTotal()
    {
        return total;
    }

2.25
Error: Missing return statement

2.26
printTicket does not return anything, but getPrice return a int.

2.27
Both have void as their return type

2.28
2.29
It has a return type
2.30
public void setPrice(int price){
this.price = price;
}
2.31
public void increase(int points)
{
	score += points;
} 

2.32

public void discount(int amount)
 {
	price -= amount;
} 

2.35
Different, as the state of 2 objects are different.

2.36
# price cents.

2.37
# price cents. 

Both same

2.38
No, as both does not refer to the fields.
2.39
It will not as for a value while creating the object.

2.40
public void empty()
{
	total = 0;
}
this is a mutator
2.43
No the balance does not change when a error message is printed.
2.44
It just does not print error message if 0 is inserted.
2.45
Yes for isVisible, I think it is appropriate because there is only 2 states possible - visible / not visible.
2.46
In Naiveicket machine there is no check of balance less/more than the ticket and also it add the total with balance which is wrong.
2.47
No, because, we print the ticket only if balance is greater than or equal to price.
2.49
double savings = price*discount;
2.50
Double mean;
if(count != 0)
{
	mean = total/count;
}
2.51
if(price > budget){
	System.out.println(“Too expensive”);
}else{
	System.out.println(Just Right”);
}
2.52
if(price > budget){
	System.out.println(“Too expensive, budget is ” + budget);
}else{
	System.out.println(Just Right”);
}

2.53
Price = 10
insertMoney -> 30
printTicket ->  which makes the total to 10 and balance to 20 , so expected GetBalance() is 20, but the version will return 0;

2.54
This will not compile, as return will exit the execution of the method. We get the error unreachable code.

2.55
public void empty()
    {
        total = 0;
    }
    2.56
Its a mutator, as it changes the state of field total. Its not a accessor as it is not returning any state of the object.

2.57
Implemented in file.

2.59 
Name - getCode
Type - String

2.60
Method name - SetCredits
Parameter 1 type - int
Parameter 1 name - creditValue

2.61
public Class Person {}

2.62

private String name;
private int age;
private String code;
private int credits;
2.63

public Module(String moduleCode){
	code = moduleCode;
}

2.64

public Person(String myName, int myAge){
	name = myName;
	age = myAge;
}

2.65

public int getAge(){
	return age;
}

2.66

public String getName(){
	return name;
}

2.67
public void setAge(int age){
	this.age = age;
}

2.68

public void printDetails(){
	System.out.println(“The name of this person is “ + name);
}

2.70
Henr557

2.71
IndexOutOfBoundsException  because length of name is 3, but the end index used is 4.

2.72
public Student(String fullName, String studentID) { 
        name = fullName;
        id = studentID;
        credits = 0;
	if(name.length() < 4){
		System.out.println(“Name should be atleast 4 digits”); 
	}
	if(id.length() < 3){
		System.out.println(“ID should be atleast 4 digits”); 
	}
} 
2.73
public String getLoginName() {
        int nameEndLength = (name.length() > 4 ) ? 4 : name.length();
        int idEndLength = (id.length() > 3) ? 3 : id.length();
        return name.substring(0,nameEndLength) + id.substring(0,idEndLength);
    }

